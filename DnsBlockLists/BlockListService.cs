using System.Text.Json;
using static System.IO.Directory;
using static System.IO.File;
using static System.IO.Path;
using static System.Text.Json.JsonSerializer;

namespace DnsBlockLists;

public class BlockListService
{
    public BlockListService()
    {
        _httpClient = new HttpClient();
    }

    private readonly HttpClient _httpClient;

    private readonly JsonSerializerOptions _jsonOptions =
        new()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

    private readonly string HostsFileName = "RawLists.json";
    private readonly string CacheFolderName = "Cache";

    public async Task<IEnumerable<string>> GetFullBlackList()
    {
        PerformHouseKeeping();

        var blockedEntries = new List<string>();

        foreach (var entry in await GetAllBlockListInfo())
        {
            blockedEntries.AddRange(
                await GetBlockListInfo(entry));
        }

        return blockedEntries;
    }

    public async Task RefreshCache()
    {
        PerformHouseKeeping();

        var listEntries = await GetAllBlockListInfo();

        foreach (var listEntry in listEntries)
        {
            await CacheBlockListInfo(listEntry);
        }
    }

    private void PerformHouseKeeping()
    {
        if (!Directory.Exists(CacheFolderName))
        {
            CreateDirectory(CacheFolderName);
        }
    }

    private async Task<IList<BlockListInfo>?> GetAllBlockListInfo()
    {
        var blockListsJson =
            await ReadAllTextAsync(HostsFileName);

        var blockLists =
            Deserialize<IList<BlockListInfo>>(
                blockListsJson,
                _jsonOptions);

        return blockLists;
    }

    private async Task<IEnumerable<string>> GetBlockListInfo(
        BlockListInfo blockList)
    {
        var fileExists = true;

        if (!File.Exists(GetCachedFilePath(blockList)))
        {
            fileExists = await CacheBlockListInfo(blockList);
        }

        if (fileExists)
        {
            return
                await ReadAllLinesAsync(
                    GetCachedFilePath(blockList));
        }

        return new string[0];
    }

    private async Task<bool> CacheBlockListInfo(BlockListInfo blockList)
    {
        try
        {
            var response =
                await _httpClient.GetStringAsync(blockList.Url);

            await WriteAllTextAsync(
                GetCachedFilePath(blockList),
                response);

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to retrieve {blockList.Name}");
            Console.WriteLine($"Failed to retrieve {ex.Message}");
            return false;
        }
    }

    private string GetCachedFilePath(
        BlockListInfo blockList) =>
            Combine(
                CacheFolderName,
                $"{blockList.Id}.txt");
}
